package main

import (
	"context"
	"flag"
	"fmt"
	"log"
	"net/http"
	"os"
	"os/signal"
	"strconv"
	"time"

	"github.com/pavva91/merkle-tree/server/config"
	// "github.com/swaggo/http-swagger" // http-swagger middleware
	_ "github.com/pavva91/merkle-tree/server/docs" // docs is generated by Swag CLI, you have to import it.
	"github.com/pavva91/merkle-tree/server/internal/middleware"
	"github.com/pavva91/merkle-tree/server/internal/router"
	httpSwagger "github.com/swaggo/http-swagger/v2"
	"gopkg.in/yaml.v2"
)

//	@title			File Server with Merkle Tree
//	@version		1.0
//	@description	HTTP File Server with Merkle Tree to ensure that the downloaded data is not tampered

// @host	localhost:8080
func main() {
	if err := mainNoExit(); err != nil {
		log.Println("shutting down")
		log.Fatal(err)
	}
	os.Exit(0)
}

func mainNoExit() error {
	var wait time.Duration
	flag.DurationVar(&wait, "graceful-timeout", time.Second*15, "the duration for which the server gracefully wait for existing connections to finish - e.g. 15s or 1m")
	flag.Parse()

	isDebug := false
	if len(os.Args) == 2 {
		debugArg := os.Args[1]
		if debugArg == "d" || debugArg == "debug" {
			os.Setenv("SERVER_ENVIRONMENT", "dev")
			isDebug = true
		}
	}
	log.Printf("debug mode: %t", isDebug)

	router.NewRouter()

	router.Router.PathPrefix("/swagger/").Handler(httpSwagger.Handler(
		httpSwagger.DeepLinking(true),
		httpSwagger.DocExpansion("none"),
		httpSwagger.DomID("swagger-ui"),
	)).Methods(http.MethodGet)

	useEnvVar := os.Getenv("USE_ENVVAR")
	log.Printf("Using envvar value: %s\n", useEnvVar)
	log.Println("must be USE_ENVVAR=\"true\" to run with environment variable, otherwise will use a config file by default")

	if useEnvVar == "true" {
		config.Values.Server.Host = os.Getenv("SERVER_HOST")
		config.Values.Server.Port = os.Getenv("SERVER_PORT")
		bulkUploadMaxSize, err := strconv.Atoi(os.Getenv("MAX_BULK_UPLOAD_SIZE"))
		if err != nil {
			log.Println("insert int value for max size of bulk upload")
			return err
		}
		config.Values.Server.MaxBulkUploadSize = bulkUploadMaxSize
		fileUploadMaxSize, err := strconv.Atoi(os.Getenv("MAX_UPLOAD_FILE_SIZE"))
		if err != nil {
			log.Println("insert int value for max size of file upload")
			return err
		}
		config.Values.Server.MaxUploadFileSize = fileUploadMaxSize
		config.Values.Server.UploadFolder = os.Getenv("UPLOAD_FOLDER")
	} else {
		env := os.Getenv("SERVER_ENVIRONMENT")

		log.Printf("Running Environment: %s", env)

		switch env {
		case "dev":
			err := setConfig("./config/dev-config.yml")
			if err != nil {
				return err
			}
			// setConfig("/home/bob/work/task/config/dev-config.yml")
		case "stage":
			err := fmt.Errorf("incorrect dev environment: %s\ninterrupt execution", env)
			return err
		case "prod":
			err := fmt.Errorf("incorrect dev environment: %s\ninterrupt execution", env)
			return err
		default:
			err := fmt.Errorf("incorrect dev environment: %s\nrun with environment variable: server_environment=\"dev\" go run main.go\ninterrupt execution", env)
			return err
		}
	}

	// run the server
	fmt.Printf("Server is running on port %s\n", config.Values.Server.Port)
	// addr := fmt.Sprint("127.0.0.1:" + config.ServerConfigValues.Server.Port)
	// addr := fmt.Sprint("0.0.0.0:" + config.ServerConfigValues.Server.Port)
	addr := fmt.Sprint(config.Values.Server.Host + ":" + config.Values.Server.Port)

	srv := &http.Server{
		// Addr: "0.0.0.0:8080",
		Addr: addr,
		// Good practice to set timeouts to avoid Slowloris attacks.
		WriteTimeout: time.Second * 15,
		ReadTimeout:  time.Second * 15,
		IdleTimeout:  time.Second * 60,
		// Handler:      router.Router, // Pass our instance of gorilla/mux in.
		Handler: middleware.Limit(router.Router), // Pass instance of gorilla/mux with http reqeusts limiter
	}

	// Run our server in a goroutine so that it doesn't block.
	go func() {
		if err := srv.ListenAndServe(); err != nil {
			log.Println(err)
		}
	}()

	c := make(chan os.Signal, 1)
	// We'll accept graceful shutdowns when quit via SIGINT (Ctrl+C)
	// SIGKILL, SIGQUIT or SIGTERM (Ctrl+/) will not be caught.
	signal.Notify(c, os.Interrupt)

	// Block until we receive our signal.
	<-c

	// Create a deadline to wait for.
	ctx, cancel := context.WithTimeout(context.Background(), wait)
	defer cancel()
	// Doesn't block if no connections, but will otherwise wait
	// until the timeout deadline.
	err := srv.Shutdown(ctx)
	if err != nil {
		err = fmt.Errorf("error shutting down gracefully, panic: %s", err.Error())
		return err
	}
	// Optionally, you could run srv.Shutdown in a goroutine and block on
	// <-ctx.Done() if your application should wait for other services
	// to finalize based on context cancellation.

	// os.Exit(0)
	// runtime.Goexit()
	return nil
}

func setConfig(path string) error {
	f, err := os.Open(path)
	if err != nil {
		log.Println(err.Error())
		return err
	}
	defer f.Close()

	decoder := yaml.NewDecoder(f)
	err = decoder.Decode(&config.Values)
	if err != nil {
		log.Println(err.Error())
		return err
	}
	return nil
}
